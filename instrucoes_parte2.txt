git clone https://github.com/ramoswrr/CursoGit.git
clona um repertório remoto na sua máquina.


git pull
baixa as alterações do repositório remoto
Mantém o repositório sincronizado com os últimos commits de uma branch.


Navegar no histórico
git log
git checkout <commit> <file>
· Permite ver como um arquivo ou todo o repositório estava em um determinado commit.

git checkout main
. para voltar o repositório no último commit

Desfazendo alterações
git checkout -- < path or file>
· Irá desfazer todas as alterações que não estejam no Stage desde o último commit.
git checkout HEAD -- < path file>
· Desfazer as alterações desde o último commit incluindo o Stage.

  Exemplo de uso: 
    git reset HEAD~1 //volta 1 commit para trás. 
    git reset HEAD~2 //volta 2 commit para trás. 
    git reset HEAD~2 --hard //volta 2 commit para trás. 

Git Revert
git revert <commit>
· Irá criar um novo commit que desfaz as alterações do commit especificado.
· Útil para desfazer um commit antigo.

Git reset
git reset <commit>
· Resetar o repositório para um determinado commit.
git reset -- hard <commit>
· Resetar e remover todas as alterações.
- Cuidado ao usar! Não usar se já estiver publicado.
· Útil para desfazer últimos commits.

Conflitos
· Conflitos podem acontecer ao unirmos alterações.
· Acontecem quando versões diferentes possuem as mesmas linhas nos mesmos arquivos editadas diferentes.
· O Git identifica os conflitos e fica aguardando a solução deles.
· Ao resolver os conflitos deve ser feito um commit.

Exercício 3
· Crie um conflito no repositório do seu par.
· Seu par deve editar o mesmo arquivo que você.
· Você deve fazer o pull, resolver o conflito e fazer o push das suas alterações.
· Seu par deve ver que a sua alteração foi adicionada junto à alteração dele.
· Invertam os papéis.

Branch
· É uma lista de commits.
· Representa ramificações no repositório.
· Muito útil para trabalhos colaborativos.
· Branchs de desenvolvimento facilitam o controle.
· Branch master é a padrão.
git branch

Branching
git branch <nova branch>
· Cria uma nova branch.
git branch -d <branch>
· Excluir uma branch.

Git Checkout Branch
git checkout <branch>
· Muda para a branch.
· Seu repositório passa a ter os commits que a branch possui e novos commits serão adicionados à ela.

Exercício 4
· Crie uma nova branch no seu repositório.
· Mude para esta branch e faça pelo menos 2 commits.
· Faça o upload e veja sua nova branch no GitHub.
· Faça um commit na master que altere as mesmas linhas.
· Veja como as branchs divergem no GitHub.

Configurar o editor padrão do Git: Se você preferir usar o Visual Studio Code como seu editor de commit, você pode configurá-lo como o editor padrão do Git com o seguinte comando no terminal:
git config --global core.editor "code --wait"

Revertendo:git config --global --unset core.editor


Git Merge
git merge <branch>
· Aplicar os commits de uma branch na branch atual.
· Encontra um commit comum(base) entre as branchs e aplica todos os commits que a branch atual não possui.
· Caso existam commits na branch atual que não estão na outra, será criado um commit de merge.


Exercício 5
· Fazer o merge da nova branch na master.
· Resolver o conflito e visualizar no GitHub o gráfico das branchs.

Git Rebase
git rebase <branch>
· Semelhante ao Merge porém é diferente na ordem de aplicar os commits.
· No Rebase, os seus commits na frente da base são removidos temporariamente, os commits de outra branch são aplicados na sua branch e por fim seus commits são aplicados um a um.
· Pode acontecer conflitos que serão resolvidos para cada commit.

Git Fetch
git fetch
· Baixa as atualizações do remote porém não aplica elas no repositório.
· Permite fazer o rebase de uma branch em vez de fazer o merge.
· Pull = Fetch + Merge
· Fetch e Rebase é melhor para manter histórico do desenvolvimento.

Exercício 7
· Com a branch master sincronizadas você e seu par devem fazer commits na master.
· Seu par deve fazer o push dos commits dele.
· Antes de você fazer o push dos seus commits você deve fazer o rebase com os commits do seu par.

Tag
· Útil para definir versões estáveis do projeto.
· Semelhante a Branch porém não recebe mais commits.
· Guarda um estado do repositório. git tag [nome da tag]
git push <remote> <tag>

Fork no GitHub
· Copia um repositório de outro usuário para o seu usuário no GitHub.
· É assim que começa a contribuição para outros projetos.
· Você teria uma cópia independente do repositório original, podendo fazer quaisquer alterações.
For


Issues no GitHub
· Tradução: Questões.
· Reportar bugs.
· Organizar tarefas a serem feitas.
· Permite discussão entre os usuários.
· Pode ser referenciado por commits.
- Commit: "Closes #3"

Pull Request
· O grande simbolo de colaboração.
· É quando você solicita que sua alterações sejam unidas a uma branch no mesmo repositório ou a um repositório que sofreu o fork.
· Igual uma Issue porém com uma branch associada.
· Muito útil para o trabalho colaborativo.

Fluxo do GitHub
· https://guides.github.com/introduction/flow/

Exercício Final
· Faça um fork deste repositório: https://github.com/BrOrlandi/GitTrainingWall
· Rode o projeto.
· Sua tarefa é criar um template com informações do seu usuário no GitHub.
· Faça o trabalho em um branch separada e depois crie um Pull Request para o repositório original.

Checkout em Pull Request
git fetch origin pull/ID/head: BRANCH · Cria uma branch com os commits do pull request